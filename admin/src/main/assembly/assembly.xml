<assembly>
    <id>assembly</id><!--名字， 会附加在版本后面-->
    <formats>
        <format>tar.gz</format>
    </formats>
    <!--如果为false，不会额外产生根目录，否则，在tar.gz包中会产生以pom.xml中artifactId和version命名的根目录-->
    <includeBaseDirectory>true</includeBaseDirectory>
    <dependencySets>
        <!--assembly中dependencySets的意思就是，将scope为runtime的依赖包，放到AlarmReport/lib目录下-->
        <dependencySet>
            <!--定义了是否解压依赖包，如果为true，会解压出依赖包中的class文件，反之，则不进行解压-->
            <unpack>false</unpack>
            <!--限定了对哪些依赖包进行操作；（依赖包scope的值是在pom.xml中定义的）-->
            <scope>runtime</scope>
            <!-- 依赖包在tar.gz包中相对于根目录的路径-->
            <outputDirectory>lib</outputDirectory>
            <!--依赖包中是否包含当前工程-->
            <useProjectArtifact>false</useProjectArtifact>
        </dependencySet>
    </dependencySets>

    <!--assembly中两个fileSets的作用是，将target/classes下的文件，打包到AlarmReport目录；将startup.sh打包到AlarmReport/bin目录-->
    <fileSets>
        <!-- 把项目相关的说明文件，打包进zip文件的根目录 -->
        <fileSet>
            <directory>${project.basedir}</directory>
            <outputDirectory></outputDirectory>
            <includes>
                <include>README*</include>
                <include>LICENSE*</include>
                <include>NOTICE*</include>
            </includes>
        </fileSet>

        <!-- 把项目的配置文件，打包进zip文件的config目录 -->
        <fileSet>
            <directory>${project.basedir}/src/main/resources/config</directory>
            <outputDirectory>config</outputDirectory>
            <includes>
                <include>*.xml</include>
                <include>*.properties</include>
            </includes>
        </fileSet>

        <!-- 把项目的模板文件，打包进zip文件的templates目录 -->
        <fileSet>
            <directory>${project.basedir}/src/main/resources/templates</directory>
            <outputDirectory>templates</outputDirectory>
        </fileSet>

        <!-- 把项目的静态资源文件，打包进zip文件的statics目录 -->
        <fileSet>
            <directory>${project.basedir}/src/main/resources/static</directory>
            <outputDirectory>static</outputDirectory>
        </fileSet>

        <!-- 创建log目录 -->
        <fileSet>
            <directory>${project.basedir}/src/main/resources/log</directory>
            <outputDirectory>log</outputDirectory>
        </fileSet>

        <!-- 把项目的脚本文件目录中的启动脚本文件，打包进zip文件的根目录 -->
        <fileSet>
            <directory>${project.basedir}/src/main/resources/script</directory>
            <outputDirectory></outputDirectory>
            <includes>
                <include>start.*</include>
            </includes>
        </fileSet>

        <!-- 把项目的脚本文件（除了启动脚本文件），打包进zip文件的script目录 -->
        <fileSet>
            <directory>${project.basedir}/src/main/resources/script</directory>
            <outputDirectory>script</outputDirectory>
            <excludes>
                <exclude>start.*</exclude>
            </excludes>
        </fileSet>

        <!-- 把项目自己编译出来的jar文件，打包进zip文件的根目录 -->
        <fileSet>
            <directory>${project.build.directory}</directory>
            <outputDirectory></outputDirectory>
            <includes>
                <include>*.jar</include>
            </includes>
        </fileSet>
    </fileSets>


</assembly>